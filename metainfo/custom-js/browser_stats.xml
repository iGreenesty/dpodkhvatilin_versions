<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<customJSElement xmlns:xi="http://www.w3.org/2001/XInclude" seg-detach="true" seg-id="browser_stats" seg-type="custom-js">
    <code>browser_stats</code>
    <description lang="ru"/>
    <file creationDate="2021-03-10T06:01:27.046Z" fileName="browser_stats.signed.js" fileSize="53562" mimeType="application/javascript">LypTSUdOQVRVUkU6a2diaGhKUE12M1lwOXF5ZlFVd0pxS3p1YTBqQ1cwcGRTVVBLTWcxdjV6SEwvcEk4WUo1WHVDaTBkbXBrZmhtRUMxWGNFMkltMFFCTWtXbzZBaWZhdHlNZk9yN3ZQeDQrMS9IblVVcWlvd1ptVGlwUXdEWjhaOGE4SFJzT2l4Z0FlUW8xQzIvSGg3MVJnaXNERCtlc282K0MydXZBTEpOai9OWlpibGF6TDk2bVlBUVMyZHhDQzA3cGVOd3gySTlhVUZ3S2RmVTFzNE0zbUw3eUxNOC9aaGl6ZnlQV3hLK1FQTjQyR2lEMnVUZFVvVTMyNjlDSUxTUTVVRXhPZG9pbU5ZQURxNnF3WFAwNDVYdnNoZHphVHcvcWRvNUpkZnNPMFZBV25INzN1RURXdnIvV3FMcUN5cU9JdmY4TENqOEt3RUxqbmVGZE14eExWOUFUM2pUWlpRPT0qLwovKioNCiAqIEBzaWduZWRCeSBkcG9ka2h2YXRpbGluDQogKiBAZGF0ZSAyOC8wMi8yMDIxDQogKi8NCg0Kew0KICAgICFmdW5jdGlvbiAoZSwgdCkgew0KICAgICAgICAib2JqZWN0IiA9PSB0eXBlb2YgZXhwb3J0cyAmJiAib2JqZWN0IiA9PSB0eXBlb2YgbW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgPSB0KCkgOiAiZnVuY3Rpb24iID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbXSwgdCkgOiAib2JqZWN0IiA9PSB0eXBlb2YgZXhwb3J0cyA/IGV4cG9ydHMuYm93c2VyID0gdCgpIDogZS5ib3dzZXIgPSB0KCkNCiAgICB9KHRoaXMsIChmdW5jdGlvbiAoKSB7DQogICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgdmFyIHQgPSB7fTsNCg0KICAgICAgICAgICAgZnVuY3Rpb24gcihuKSB7DQogICAgICAgICAgICAgICAgaWYgKHRbbl0pIHJldHVybiB0W25dLmV4cG9ydHM7DQogICAgICAgICAgICAgICAgdmFyIGkgPSB0W25dID0ge2k6IG4sIGw6ICExLCBleHBvcnRzOiB7fX07DQogICAgICAgICAgICAgICAgcmV0dXJuIGVbbl0uY2FsbChpLmV4cG9ydHMsIGksIGkuZXhwb3J0cywgciksIGkubCA9ICEwLCBpLmV4cG9ydHMNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHIubSA9IGUsIHIuYyA9IHQsIHIuZCA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7DQogICAgICAgICAgICAgICAgci5vKGUsIHQpIHx8IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCB0LCB7ZW51bWVyYWJsZTogITAsIGdldDogbn0pDQogICAgICAgICAgICB9LCByLnIgPSBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICJ1bmRlZmluZWQiICE9IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBTeW1ib2wudG9TdHJpbmdUYWcsIHt2YWx1ZTogIk1vZHVsZSJ9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsICJfX2VzTW9kdWxlIiwge3ZhbHVlOiAhMH0pDQogICAgICAgICAgICB9LCByLnQgPSBmdW5jdGlvbiAoZSwgdCkgew0KICAgICAgICAgICAgICAgIGlmICgxICYgdCAmJiAoZSA9IHIoZSkpLCA4ICYgdCkgcmV0dXJuIGU7DQogICAgICAgICAgICAgICAgaWYgKDQgJiB0ICYmICJvYmplY3QiID09IHR5cGVvZiBlICYmIGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTsNCiAgICAgICAgICAgICAgICB2YXIgbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7DQogICAgICAgICAgICAgICAgaWYgKHIucihuKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sICJkZWZhdWx0Iiwgew0KICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiAhMCwNCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGUNCiAgICAgICAgICAgICAgICB9KSwgMiAmIHQgJiYgInN0cmluZyIgIT0gdHlwZW9mIGUpIGZvciAodmFyIGkgaW4gZSkgci5kKG4sIGksIGZ1bmN0aW9uICh0KSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBlW3RdDQogICAgICAgICAgICAgICAgfS5iaW5kKG51bGwsIGkpKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gbg0KICAgICAgICAgICAgfSwgci5uID0gZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICB2YXIgdCA9IGUgJiYgZS5fX2VzTW9kdWxlID8gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5kZWZhdWx0DQogICAgICAgICAgICAgICAgfSA6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIHJldHVybiByLmQodCwgImEiLCB0KSwgdA0KICAgICAgICAgICAgfSwgci5vID0gZnVuY3Rpb24gKGUsIHQpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIHQpDQogICAgICAgICAgICB9LCByLnAgPSAiIiwgcihyLnMgPSA5MCkNCiAgICAgICAgfSh7DQogICAgICAgICAgICAxNzogZnVuY3Rpb24gKGUsIHQsIHIpIHsNCiAgICAgICAgICAgICAgICAidXNlIHN0cmljdCI7DQogICAgICAgICAgICAgICAgdC5fX2VzTW9kdWxlID0gITAsIHQuZGVmYXVsdCA9IHZvaWQgMDsNCiAgICAgICAgICAgICAgICB2YXIgbiA9IHIoMTgpLCBpID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlKCkgew0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuZ2V0Rmlyc3RNYXRjaCA9IGZ1bmN0aW9uIChlLCB0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHQubWF0Y2goZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiByLmxlbmd0aCA+IDAgJiYgclsxXSB8fCAiIg0KICAgICAgICAgICAgICAgICAgICB9LCBlLmdldFNlY29uZE1hdGNoID0gZnVuY3Rpb24gKGUsIHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdC5tYXRjaChlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmIHIubGVuZ3RoID4gMSAmJiByWzJdIHx8ICIiDQogICAgICAgICAgICAgICAgICAgIH0sIGUubWF0Y2hBbmRSZXR1cm5Db25zdCA9IGZ1bmN0aW9uIChlLCB0LCByKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50ZXN0KHQpKSByZXR1cm4gcg0KICAgICAgICAgICAgICAgICAgICB9LCBlLmdldFdpbmRvd3NWZXJzaW9uTmFtZSA9IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIk5UIjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJOVCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSJYUCI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiWFAiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UiTlQgNS4wIjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIyMDAwIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIk5UIDUuMSI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiWFAiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UiTlQgNS4yIjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIyMDAzIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIk5UIDYuMCI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiVmlzdGEiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UiTlQgNi4xIjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICI3IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIk5UIDYuMiI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiOCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSJOVCA2LjMiOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIjguMSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSJOVCAxMC4wIjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIxMCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sIGUuZ2V0TWFjT1NWZXJzaW9uTmFtZSA9IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGUuc3BsaXQoIi4iKS5zcGxpY2UoMCwgMikubWFwKChmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChlLCAxMCkgfHwgMA0KICAgICAgICAgICAgICAgICAgICAgICAgfSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQucHVzaCgwKSwgMTAgPT09IHRbMF0pIHN3aXRjaCAodFsxXSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJMZW9wYXJkIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiU25vdyBMZW9wYXJkIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiTGlvbiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIk1vdW50YWluIExpb24iOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJNYXZlcmlja3MiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiWW9zZW1pdGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiRWwgQ2FwaXRhbiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJTaWVycmEiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiSGlnaCBTaWVycmEiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiTW9qYXZlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE1Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIkNhdGFsaW5hIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwgZS5nZXRBbmRyb2lkVmVyc2lvbk5hbWUgPSBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBlLnNwbGl0KCIuIikuc3BsaWNlKDAsIDIpLm1hcCgoZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoZSwgMTApIHx8IDANCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnB1c2goMCksICEoMSA9PT0gdFswXSAmJiB0WzFdIDwgNSkpIHJldHVybiAxID09PSB0WzBdICYmIHRbMV0gPCA2ID8gIkN1cGNha2UiIDogMSA9PT0gdFswXSAmJiB0WzFdID49IDYgPyAiRG9udXQiIDogMiA9PT0gdFswXSAmJiB0WzFdIDwgMiA/ICJFY2xhaXIiIDogMiA9PT0gdFswXSAmJiAyID09PSB0WzFdID8gIkZyb3lvIiA6IDIgPT09IHRbMF0gJiYgdFsxXSA+IDIgPyAiR2luZ2VyYnJlYWQiIDogMyA9PT0gdFswXSA/ICJIb25leWNvbWIiIDogNCA9PT0gdFswXSAmJiB0WzFdIDwgMSA/ICJJY2UgQ3JlYW0gU2FuZHdpY2giIDogNCA9PT0gdFswXSAmJiB0WzFdIDwgNCA/ICJKZWxseSBCZWFuIiA6IDQgPT09IHRbMF0gJiYgdFsxXSA+PSA0ID8gIktpdEthdCIgOiA1ID09PSB0WzBdID8gIkxvbGxpcG9wIiA6IDYgPT09IHRbMF0gPyAiTWFyc2htYWxsb3ciIDogNyA9PT0gdFswXSA/ICJOb3VnYXQiIDogOCA9PT0gdFswXSA/ICJPcmVvIiA6IDkgPT09IHRbMF0gPyAiUGllIiA6IHZvaWQgMA0KICAgICAgICAgICAgICAgICAgICB9LCBlLmdldFZlcnNpb25QcmVjaXNpb24gPSBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc3BsaXQoIi4iKS5sZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgfSwgZS5jb21wYXJlVmVyc2lvbnMgPSBmdW5jdGlvbiAodCwgciwgbikgew0KICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBuICYmIChuID0gITEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlLmdldFZlcnNpb25QcmVjaXNpb24odCksIHMgPSBlLmdldFZlcnNpb25QcmVjaXNpb24ociksIGEgPSBNYXRoLm1heChpLCBzKSwgbyA9IDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGUubWFwKFt0LCByXSwgKGZ1bmN0aW9uICh0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gYSAtIGUuZ2V0VmVyc2lvblByZWNpc2lvbih0KSwgbiA9IHQgKyBuZXcgQXJyYXkociArIDEpLmpvaW4oIi4wIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLm1hcChuLnNwbGl0KCIuIiksIChmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheSgyMCAtIGUubGVuZ3RoKS5qb2luKCIwIikgKyBlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5yZXZlcnNlKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7DQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG4gJiYgKG8gPSBhIC0gTWF0aC5taW4oaSwgcykpLCBhIC09IDE7IGEgPj0gbzspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodVswXVthXSA+IHVbMV1bYV0pIHJldHVybiAxOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1WzBdW2FdID09PSB1WzFdW2FdKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID09PSBvKSByZXR1cm4gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSAtPSAxDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1WzBdW2FdIDwgdVsxXVthXSkgcmV0dXJuIC0xDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sIGUubWFwID0gZnVuY3Rpb24gKGUsIHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByLCBuID0gW107DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkucHJvdG90eXBlLm1hcCkgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChlLCB0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAociA9IDA7IHIgPCBlLmxlbmd0aDsgciArPSAxKSBuLnB1c2godChlW3JdKSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbg0KICAgICAgICAgICAgICAgICAgICB9LCBlLmZpbmQgPSBmdW5jdGlvbiAoZSwgdCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIsIG47DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmluZC5jYWxsKGUsIHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChyID0gMCwgbiA9IGUubGVuZ3RoOyByIDwgbjsgciArPSAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlW3JdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0KGksIHIpKSByZXR1cm4gaQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LCBlLmFzc2lnbiA9IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0LCByLCBuID0gZSwgaSA9IGFyZ3VtZW50cy5sZW5ndGgsIHMgPSBuZXcgQXJyYXkoaSA+IDEgPyBpIC0gMSA6IDApLCBhID0gMTsgYSA8IGk7IGErKykgc1thIC0gMV0gPSBhcmd1bWVudHNbYV07DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmFzc2lnbikgcmV0dXJuIE9iamVjdC5hc3NpZ24uYXBwbHkoT2JqZWN0LCBbZV0uY29uY2F0KHMpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gc1t0XTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAib2JqZWN0IiA9PSB0eXBlb2YgZSAmJiBudWxsICE9PSBlICYmIE9iamVjdC5rZXlzKGUpLmZvckVhY2goKGZ1bmN0aW9uICh0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5bdF0gPSBlW3RdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpDQogICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh0ID0gMCwgciA9IHMubGVuZ3RoOyB0IDwgcjsgdCArPSAxKSBvKCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZQ0KICAgICAgICAgICAgICAgICAgICB9LCBlLmdldEJyb3dzZXJBbGlhcyA9IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5CUk9XU0VSX0FMSUFTRVNfTUFQW2VdDQogICAgICAgICAgICAgICAgICAgIH0sIGUuZ2V0QnJvd3NlclR5cGVCeUFsaWFzID0gZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLkJST1dTRVJfTUFQW2VdIHx8ICIiDQogICAgICAgICAgICAgICAgICAgIH0sIGUNCiAgICAgICAgICAgICAgICB9KCk7DQogICAgICAgICAgICAgICAgdC5kZWZhdWx0ID0gaSwgZS5leHBvcnRzID0gdC5kZWZhdWx0DQogICAgICAgICAgICB9LCAxODogZnVuY3Rpb24gKGUsIHQsIHIpIHsNCiAgICAgICAgICAgICAgICAidXNlIHN0cmljdCI7DQogICAgICAgICAgICAgICAgdC5fX2VzTW9kdWxlID0gITAsIHQuRU5HSU5FX01BUCA9IHQuT1NfTUFQID0gdC5QTEFURk9STVNfTUFQID0gdC5CUk9XU0VSX01BUCA9IHQuQlJPV1NFUl9BTElBU0VTX01BUCA9IHZvaWQgMDsNCiAgICAgICAgICAgICAgICB0LkJST1dTRVJfQUxJQVNFU19NQVAgPSB7DQogICAgICAgICAgICAgICAgICAgICJBbWF6b24gU2lsayI6ICJhbWF6b25fc2lsayIsDQogICAgICAgICAgICAgICAgICAgICJBbmRyb2lkIEJyb3dzZXIiOiAiYW5kcm9pZCIsDQogICAgICAgICAgICAgICAgICAgIEJhZGE6ICJiYWRhIiwNCiAgICAgICAgICAgICAgICAgICAgQmxhY2tCZXJyeTogImJsYWNrYmVycnkiLA0KICAgICAgICAgICAgICAgICAgICBDaHJvbWU6ICJjaHJvbWUiLA0KICAgICAgICAgICAgICAgICAgICBDaHJvbWl1bTogImNocm9taXVtIiwNCiAgICAgICAgICAgICAgICAgICAgRWxlY3Ryb246ICJlbGVjdHJvbiIsDQogICAgICAgICAgICAgICAgICAgIEVwaXBoYW55OiAiZXBpcGhhbnkiLA0KICAgICAgICAgICAgICAgICAgICBGaXJlZm94OiAiZmlyZWZveCIsDQogICAgICAgICAgICAgICAgICAgIEZvY3VzOiAiZm9jdXMiLA0KICAgICAgICAgICAgICAgICAgICBHZW5lcmljOiAiZ2VuZXJpYyIsDQogICAgICAgICAgICAgICAgICAgICJHb29nbGUgU2VhcmNoIjogImdvb2dsZV9zZWFyY2giLA0KICAgICAgICAgICAgICAgICAgICBHb29nbGVib3Q6ICJnb29nbGVib3QiLA0KICAgICAgICAgICAgICAgICAgICAiSW50ZXJuZXQgRXhwbG9yZXIiOiAiaWUiLA0KICAgICAgICAgICAgICAgICAgICAiSy1NZWxlb24iOiAia19tZWxlb24iLA0KICAgICAgICAgICAgICAgICAgICBNYXh0aG9uOiAibWF4dGhvbiIsDQogICAgICAgICAgICAgICAgICAgICJNaWNyb3NvZnQgRWRnZSI6ICJlZGdlIiwNCiAgICAgICAgICAgICAgICAgICAgIk1aIEJyb3dzZXIiOiAibXoiLA0KICAgICAgICAgICAgICAgICAgICAiTkFWRVIgV2hhbGUgQnJvd3NlciI6ICJuYXZlciIsDQogICAgICAgICAgICAgICAgICAgIE9wZXJhOiAib3BlcmEiLA0KICAgICAgICAgICAgICAgICAgICAiT3BlcmEgQ29hc3QiOiAib3BlcmFfY29hc3QiLA0KICAgICAgICAgICAgICAgICAgICBQaGFudG9tSlM6ICJwaGFudG9tanMiLA0KICAgICAgICAgICAgICAgICAgICBQdWZmaW46ICJwdWZmaW4iLA0KICAgICAgICAgICAgICAgICAgICBRdXBaaWxsYTogInF1cHppbGxhIiwNCiAgICAgICAgICAgICAgICAgICAgUVE6ICJxcSIsDQogICAgICAgICAgICAgICAgICAgIFFRTGl0ZTogInFxbGl0ZSIsDQogICAgICAgICAgICAgICAgICAgIFNhZmFyaTogInNhZmFyaSIsDQogICAgICAgICAgICAgICAgICAgIFNhaWxmaXNoOiAic2FpbGZpc2giLA0KICAgICAgICAgICAgICAgICAgICAiU2Ftc3VuZyBJbnRlcm5ldCBmb3IgQW5kcm9pZCI6ICJzYW1zdW5nX2ludGVybmV0IiwNCiAgICAgICAgICAgICAgICAgICAgU2VhTW9ua2V5OiAic2VhbW9ua2V5IiwNCiAgICAgICAgICAgICAgICAgICAgU2xlaXBuaXI6ICJzbGVpcG5pciIsDQogICAgICAgICAgICAgICAgICAgIFN3aW5nOiAic3dpbmciLA0KICAgICAgICAgICAgICAgICAgICBUaXplbjogInRpemVuIiwNCiAgICAgICAgICAgICAgICAgICAgIlVDIEJyb3dzZXIiOiAidWMiLA0KICAgICAgICAgICAgICAgICAgICBWaXZhbGRpOiAidml2YWxkaSIsDQogICAgICAgICAgICAgICAgICAgICJXZWJPUyBCcm93c2VyIjogIndlYm9zIiwNCiAgICAgICAgICAgICAgICAgICAgV2VDaGF0OiAid2VjaGF0IiwNCiAgICAgICAgICAgICAgICAgICAgIllhbmRleCBCcm93c2VyIjogInlhbmRleCIsDQogICAgICAgICAgICAgICAgICAgIFJva3U6ICJyb2t1Ig0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgdC5CUk9XU0VSX01BUCA9IHsNCiAgICAgICAgICAgICAgICAgICAgYW1hem9uX3NpbGs6ICJBbWF6b24gU2lsayIsDQogICAgICAgICAgICAgICAgICAgIGFuZHJvaWQ6ICJBbmRyb2lkIEJyb3dzZXIiLA0KICAgICAgICAgICAgICAgICAgICBiYWRhOiAiQmFkYSIsDQogICAgICAgICAgICAgICAgICAgIGJsYWNrYmVycnk6ICJCbGFja0JlcnJ5IiwNCiAgICAgICAgICAgICAgICAgICAgY2hyb21lOiAiQ2hyb21lIiwNCiAgICAgICAgICAgICAgICAgICAgY2hyb21pdW06ICJDaHJvbWl1bSIsDQogICAgICAgICAgICAgICAgICAgIGVsZWN0cm9uOiAiRWxlY3Ryb24iLA0KICAgICAgICAgICAgICAgICAgICBlcGlwaGFueTogIkVwaXBoYW55IiwNCiAgICAgICAgICAgICAgICAgICAgZmlyZWZveDogIkZpcmVmb3giLA0KICAgICAgICAgICAgICAgICAgICBmb2N1czogIkZvY3VzIiwNCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJpYzogIkdlbmVyaWMiLA0KICAgICAgICAgICAgICAgICAgICBnb29nbGVib3Q6ICJHb29nbGVib3QiLA0KICAgICAgICAgICAgICAgICAgICBnb29nbGVfc2VhcmNoOiAiR29vZ2xlIFNlYXJjaCIsDQogICAgICAgICAgICAgICAgICAgIGllOiAiSW50ZXJuZXQgRXhwbG9yZXIiLA0KICAgICAgICAgICAgICAgICAgICBrX21lbGVvbjogIkstTWVsZW9uIiwNCiAgICAgICAgICAgICAgICAgICAgbWF4dGhvbjogIk1heHRob24iLA0KICAgICAgICAgICAgICAgICAgICBlZGdlOiAiTWljcm9zb2Z0IEVkZ2UiLA0KICAgICAgICAgICAgICAgICAgICBtejogIk1aIEJyb3dzZXIiLA0KICAgICAgICAgICAgICAgICAgICBuYXZlcjogIk5BVkVSIFdoYWxlIEJyb3dzZXIiLA0KICAgICAgICAgICAgICAgICAgICBvcGVyYTogIk9wZXJhIiwNCiAgICAgICAgICAgICAgICAgICAgb3BlcmFfY29hc3Q6ICJPcGVyYSBDb2FzdCIsDQogICAgICAgICAgICAgICAgICAgIHBoYW50b21qczogIlBoYW50b21KUyIsDQogICAgICAgICAgICAgICAgICAgIHB1ZmZpbjogIlB1ZmZpbiIsDQogICAgICAgICAgICAgICAgICAgIHF1cHppbGxhOiAiUXVwWmlsbGEiLA0KICAgICAgICAgICAgICAgICAgICBxcTogIlFRIEJyb3dzZXIiLA0KICAgICAgICAgICAgICAgICAgICBxcWxpdGU6ICJRUSBCcm93c2VyIExpdGUiLA0KICAgICAgICAgICAgICAgICAgICBzYWZhcmk6ICJTYWZhcmkiLA0KICAgICAgICAgICAgICAgICAgICBzYWlsZmlzaDogIlNhaWxmaXNoIiwNCiAgICAgICAgICAgICAgICAgICAgc2Ftc3VuZ19pbnRlcm5ldDogIlNhbXN1bmcgSW50ZXJuZXQgZm9yIEFuZHJvaWQiLA0KICAgICAgICAgICAgICAgICAgICBzZWFtb25rZXk6ICJTZWFNb25rZXkiLA0KICAgICAgICAgICAgICAgICAgICBzbGVpcG5pcjogIlNsZWlwbmlyIiwNCiAgICAgICAgICAgICAgICAgICAgc3dpbmc6ICJTd2luZyIsDQogICAgICAgICAgICAgICAgICAgIHRpemVuOiAiVGl6ZW4iLA0KICAgICAgICAgICAgICAgICAgICB1YzogIlVDIEJyb3dzZXIiLA0KICAgICAgICAgICAgICAgICAgICB2aXZhbGRpOiAiVml2YWxkaSIsDQogICAgICAgICAgICAgICAgICAgIHdlYm9zOiAiV2ViT1MgQnJvd3NlciIsDQogICAgICAgICAgICAgICAgICAgIHdlY2hhdDogIldlQ2hhdCIsDQogICAgICAgICAgICAgICAgICAgIHlhbmRleDogIllhbmRleCBCcm93c2VyIg0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgdC5QTEFURk9STVNfTUFQID0ge3RhYmxldDogInRhYmxldCIsIG1vYmlsZTogIm1vYmlsZSIsIGRlc2t0b3A6ICJkZXNrdG9wIiwgdHY6ICJ0diJ9Ow0KICAgICAgICAgICAgICAgIHQuT1NfTUFQID0gew0KICAgICAgICAgICAgICAgICAgICBXaW5kb3dzUGhvbmU6ICJXaW5kb3dzIFBob25lIiwNCiAgICAgICAgICAgICAgICAgICAgV2luZG93czogIldpbmRvd3MiLA0KICAgICAgICAgICAgICAgICAgICBNYWNPUzogIm1hY09TIiwNCiAgICAgICAgICAgICAgICAgICAgaU9TOiAiaU9TIiwNCiAgICAgICAgICAgICAgICAgICAgQW5kcm9pZDogIkFuZHJvaWQiLA0KICAgICAgICAgICAgICAgICAgICBXZWJPUzogIldlYk9TIiwNCiAgICAgICAgICAgICAgICAgICAgQmxhY2tCZXJyeTogIkJsYWNrQmVycnkiLA0KICAgICAgICAgICAgICAgICAgICBCYWRhOiAiQmFkYSIsDQogICAgICAgICAgICAgICAgICAgIFRpemVuOiAiVGl6ZW4iLA0KICAgICAgICAgICAgICAgICAgICBMaW51eDogIkxpbnV4IiwNCiAgICAgICAgICAgICAgICAgICAgQ2hyb21lT1M6ICJDaHJvbWUgT1MiLA0KICAgICAgICAgICAgICAgICAgICBQbGF5U3RhdGlvbjQ6ICJQbGF5U3RhdGlvbiA0IiwNCiAgICAgICAgICAgICAgICAgICAgUm9rdTogIlJva3UiDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICB0LkVOR0lORV9NQVAgPSB7DQogICAgICAgICAgICAgICAgICAgIEVkZ2VIVE1MOiAiRWRnZUhUTUwiLA0KICAgICAgICAgICAgICAgICAgICBCbGluazogIkJsaW5rIiwNCiAgICAgICAgICAgICAgICAgICAgVHJpZGVudDogIlRyaWRlbnQiLA0KICAgICAgICAgICAgICAgICAgICBQcmVzdG86ICJQcmVzdG8iLA0KICAgICAgICAgICAgICAgICAgICBHZWNrbzogIkdlY2tvIiwNCiAgICAgICAgICAgICAgICAgICAgV2ViS2l0OiAiV2ViS2l0Ig0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sIDkwOiBmdW5jdGlvbiAoZSwgdCwgcikgew0KICAgICAgICAgICAgICAgICJ1c2Ugc3RyaWN0IjsNCiAgICAgICAgICAgICAgICB0Ll9fZXNNb2R1bGUgPSAhMCwgdC5kZWZhdWx0ID0gdm9pZCAwOw0KICAgICAgICAgICAgICAgIHZhciBuLCBpID0gKG4gPSByKDkxKSkgJiYgbi5fX2VzTW9kdWxlID8gbiA6IHtkZWZhdWx0OiBufSwgcyA9IHIoMTgpOw0KDQogICAgICAgICAgICAgICAgZnVuY3Rpb24gYShlLCB0KSB7DQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgdC5sZW5ndGg7IHIrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0W3JdOw0KICAgICAgICAgICAgICAgICAgICAgICAgbi5lbnVtZXJhYmxlID0gbi5lbnVtZXJhYmxlIHx8ICExLCBuLmNvbmZpZ3VyYWJsZSA9ICEwLCAidmFsdWUiIGluIG4gJiYgKG4ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBuLmtleSwgbikNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHZhciBvID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlKCkgew0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIHQsIHIsIG47DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmdldFBhcnNlciA9IGZ1bmN0aW9uIChlLCB0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSB0ICYmICh0ID0gITEpLCAic3RyaW5nIiAhPSB0eXBlb2YgZSkgdGhyb3cgbmV3IEVycm9yKCJVc2VyQWdlbnQgc2hvdWxkIGJlIGEgc3RyaW5nIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGkuZGVmYXVsdChlLCB0KQ0KICAgICAgICAgICAgICAgICAgICB9LCBlLnBhcnNlID0gZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaS5kZWZhdWx0KGUpLmdldFJlc3VsdCgpDQogICAgICAgICAgICAgICAgICAgIH0sIHQgPSBlLCBuID0gW3sNCiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogIkJST1dTRVJfTUFQIiwgZ2V0OiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuQlJPV1NFUl9NQVANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAiRU5HSU5FX01BUCIsIGdldDogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLkVOR0lORV9NQVANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAiT1NfTUFQIiwgZ2V0OiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuT1NfTUFQDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogIlBMQVRGT1JNU19NQVAiLCBnZXQ6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5QTEFURk9STVNfTUFQDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH1dLCAociA9IG51bGwpICYmIGEodC5wcm90b3R5cGUsIHIpLCBuICYmIGEodCwgbiksIGUNCiAgICAgICAgICAgICAgICB9KCk7DQogICAgICAgICAgICAgICAgdC5kZWZhdWx0ID0gbywgZS5leHBvcnRzID0gdC5kZWZhdWx0DQogICAgICAgICAgICB9LCA5MTogZnVuY3Rpb24gKGUsIHQsIHIpIHsNCiAgICAgICAgICAgICAgICAidXNlIHN0cmljdCI7DQogICAgICAgICAgICAgICAgdC5fX2VzTW9kdWxlID0gITAsIHQuZGVmYXVsdCA9IHZvaWQgMDsNCiAgICAgICAgICAgICAgICB2YXIgbiA9IHUocig5MikpLCBpID0gdShyKDkzKSksIHMgPSB1KHIoOTQpKSwgYSA9IHUocig5NSkpLCBvID0gdShyKDE3KSk7DQoNCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1KGUpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHtkZWZhdWx0OiBlfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHZhciBkID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlKGUsIHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHQgJiYgKHQgPSAhMSksIG51bGwgPT0gZSB8fCAiIiA9PT0gZSkgdGhyb3cgbmV3IEVycm9yKCJVc2VyQWdlbnQgcGFyYW1ldGVyIGNhbid0IGJlIGVtcHR5Iik7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91YSA9IGUsIHRoaXMucGFyc2VkUmVzdWx0ID0ge30sICEwICE9PSB0ICYmIHRoaXMucGFyc2UoKQ0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBlLnByb3RvdHlwZTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuZ2V0VUEgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdWENCiAgICAgICAgICAgICAgICAgICAgfSwgdC50ZXN0ID0gZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnRlc3QodGhpcy5fdWEpDQogICAgICAgICAgICAgICAgICAgIH0sIHQucGFyc2VCcm93c2VyID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzOw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZWRSZXN1bHQuYnJvd3NlciA9IHt9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBvLmRlZmF1bHQuZmluZChuLmRlZmF1bHQsIChmdW5jdGlvbiAodCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iID09IHR5cGVvZiB0LnRlc3QpIHJldHVybiB0LnRlc3QoZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQudGVzdCBpbnN0YW5jZW9mIEFycmF5KSByZXR1cm4gdC50ZXN0LnNvbWUoKGZ1bmN0aW9uICh0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnRlc3QodCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJCcm93c2VyJ3MgdGVzdCBmdW5jdGlvbiBpcyBub3QgdmFsaWQiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgJiYgKHRoaXMucGFyc2VkUmVzdWx0LmJyb3dzZXIgPSB0LmRlc2NyaWJlKHRoaXMuZ2V0VUEoKSkpLCB0aGlzLnBhcnNlZFJlc3VsdC5icm93c2VyDQogICAgICAgICAgICAgICAgICAgIH0sIHQuZ2V0QnJvd3NlciA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlZFJlc3VsdC5icm93c2VyID8gdGhpcy5wYXJzZWRSZXN1bHQuYnJvd3NlciA6IHRoaXMucGFyc2VCcm93c2VyKCkNCiAgICAgICAgICAgICAgICAgICAgfSwgdC5nZXRCcm93c2VyTmFtZSA9IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA/IFN0cmluZyh0aGlzLmdldEJyb3dzZXIoKS5uYW1lKS50b0xvd2VyQ2FzZSgpIHx8ICIiIDogdGhpcy5nZXRCcm93c2VyKCkubmFtZSB8fCAiIg0KICAgICAgICAgICAgICAgICAgICB9LCB0LmdldEJyb3dzZXJWZXJzaW9uID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnJvd3NlcigpLnZlcnNpb24NCiAgICAgICAgICAgICAgICAgICAgfSwgdC5nZXRPUyA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlZFJlc3VsdC5vcyA/IHRoaXMucGFyc2VkUmVzdWx0Lm9zIDogdGhpcy5wYXJzZU9TKCkNCiAgICAgICAgICAgICAgICAgICAgfSwgdC5wYXJzZU9TID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzOw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZWRSZXN1bHQub3MgPSB7fTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gby5kZWZhdWx0LmZpbmQoaS5kZWZhdWx0LCAoZnVuY3Rpb24gKHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgdC50ZXN0KSByZXR1cm4gdC50ZXN0KGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnRlc3QgaW5zdGFuY2VvZiBBcnJheSkgcmV0dXJuIHQudGVzdC5zb21lKChmdW5jdGlvbiAodCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50ZXN0KHQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkIikNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmICh0aGlzLnBhcnNlZFJlc3VsdC5vcyA9IHQuZGVzY3JpYmUodGhpcy5nZXRVQSgpKSksIHRoaXMucGFyc2VkUmVzdWx0Lm9zDQogICAgICAgICAgICAgICAgICAgIH0sIHQuZ2V0T1NOYW1lID0gZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5nZXRPUygpLm5hbWU7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA/IFN0cmluZyh0KS50b0xvd2VyQ2FzZSgpIHx8ICIiIDogdCB8fCAiIg0KICAgICAgICAgICAgICAgICAgICB9LCB0LmdldE9TVmVyc2lvbiA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9TKCkudmVyc2lvbg0KICAgICAgICAgICAgICAgICAgICB9LCB0LmdldFBsYXRmb3JtID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUmVzdWx0LnBsYXRmb3JtID8gdGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm0gOiB0aGlzLnBhcnNlUGxhdGZvcm0oKQ0KICAgICAgICAgICAgICAgICAgICB9LCB0LmdldFBsYXRmb3JtVHlwZSA9IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSAhMSk7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuZ2V0UGxhdGZvcm0oKS50eXBlOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPyBTdHJpbmcodCkudG9Mb3dlckNhc2UoKSB8fCAiIiA6IHQgfHwgIiINCiAgICAgICAgICAgICAgICAgICAgfSwgdC5wYXJzZVBsYXRmb3JtID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzOw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm0gPSB7fTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gby5kZWZhdWx0LmZpbmQocy5kZWZhdWx0LCAoZnVuY3Rpb24gKHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgdC50ZXN0KSByZXR1cm4gdC50ZXN0KGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnRlc3QgaW5zdGFuY2VvZiBBcnJheSkgcmV0dXJuIHQudGVzdC5zb21lKChmdW5jdGlvbiAodCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50ZXN0KHQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkIikNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmICh0aGlzLnBhcnNlZFJlc3VsdC5wbGF0Zm9ybSA9IHQuZGVzY3JpYmUodGhpcy5nZXRVQSgpKSksIHRoaXMucGFyc2VkUmVzdWx0LnBsYXRmb3JtDQogICAgICAgICAgICAgICAgICAgIH0sIHQuZ2V0RW5naW5lID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUmVzdWx0LmVuZ2luZSA/IHRoaXMucGFyc2VkUmVzdWx0LmVuZ2luZSA6IHRoaXMucGFyc2VFbmdpbmUoKQ0KICAgICAgICAgICAgICAgICAgICB9LCB0LmdldEVuZ2luZU5hbWUgPSBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPyBTdHJpbmcodGhpcy5nZXRFbmdpbmUoKS5uYW1lKS50b0xvd2VyQ2FzZSgpIHx8ICIiIDogdGhpcy5nZXRFbmdpbmUoKS5uYW1lIHx8ICIiDQogICAgICAgICAgICAgICAgICAgIH0sIHQucGFyc2VFbmdpbmUgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXM7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlZFJlc3VsdC5lbmdpbmUgPSB7fTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gby5kZWZhdWx0LmZpbmQoYS5kZWZhdWx0LCAoZnVuY3Rpb24gKHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgdC50ZXN0KSByZXR1cm4gdC50ZXN0KGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnRlc3QgaW5zdGFuY2VvZiBBcnJheSkgcmV0dXJuIHQudGVzdC5zb21lKChmdW5jdGlvbiAodCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50ZXN0KHQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkIikNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmICh0aGlzLnBhcnNlZFJlc3VsdC5lbmdpbmUgPSB0LmRlc2NyaWJlKHRoaXMuZ2V0VUEoKSkpLCB0aGlzLnBhcnNlZFJlc3VsdC5lbmdpbmUNCiAgICAgICAgICAgICAgICAgICAgfSwgdC5wYXJzZSA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlQnJvd3NlcigpLCB0aGlzLnBhcnNlT1MoKSwgdGhpcy5wYXJzZVBsYXRmb3JtKCksIHRoaXMucGFyc2VFbmdpbmUoKSwgdGhpcw0KICAgICAgICAgICAgICAgICAgICB9LCB0LmdldFJlc3VsdCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvLmRlZmF1bHQuYXNzaWduKHt9LCB0aGlzLnBhcnNlZFJlc3VsdCkNCiAgICAgICAgICAgICAgICAgICAgfSwgdC5zYXRpc2ZpZXMgPSBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLCByID0ge30sIG4gPSAwLCBpID0ge30sIHMgPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGUpLmZvckVhY2goKGZ1bmN0aW9uICh0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlW3RdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJpbmciID09IHR5cGVvZiBhID8gKGlbdF0gPSBhLCBzICs9IDEpIDogIm9iamVjdCIgPT0gdHlwZW9mIGEgJiYgKHJbdF0gPSBhLCBuICs9IDEpDQogICAgICAgICAgICAgICAgICAgICAgICB9KSksIG4gPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBPYmplY3Qua2V5cyhyKSwgdSA9IG8uZGVmYXVsdC5maW5kKGEsIChmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5pc09TKGUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gdGhpcy5zYXRpc2ZpZXMoclt1XSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGQpIHJldHVybiBkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gby5kZWZhdWx0LmZpbmQoYSwgKGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmlzUGxhdGZvcm0oZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSB0aGlzLnNhdGlzZmllcyhyW2NdKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZikgcmV0dXJuIGYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocyA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IE9iamVjdC5rZXlzKGkpLCBoID0gby5kZWZhdWx0LmZpbmQobCwgKGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmlzQnJvd3NlcihlLCAhMCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gaCkgcmV0dXJuIHRoaXMuY29tcGFyZVZlcnNpb24oaVtoXSkNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwgdC5pc0Jyb3dzZXIgPSBmdW5jdGlvbiAoZSwgdCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0gITEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmdldEJyb3dzZXJOYW1lKCkudG9Mb3dlckNhc2UoKSwgbiA9IGUudG9Mb3dlckNhc2UoKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gby5kZWZhdWx0LmdldEJyb3dzZXJUeXBlQnlBbGlhcyhuKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIGkgJiYgKG4gPSBpLnRvTG93ZXJDYXNlKCkpLCBuID09PSByDQogICAgICAgICAgICAgICAgICAgIH0sIHQuY29tcGFyZVZlcnNpb24gPSBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBbMF0sIHIgPSBlLCBuID0gITEsIGkgPSB0aGlzLmdldEJyb3dzZXJWZXJzaW9uKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIGkpIHJldHVybiAiPiIgPT09IGVbMF0gfHwgIjwiID09PSBlWzBdID8gKHIgPSBlLnN1YnN0cigxKSwgIj0iID09PSBlWzFdID8gKG4gPSAhMCwgciA9IGUuc3Vic3RyKDIpKSA6IHQgPSBbXSwgIj4iID09PSBlWzBdID8gdC5wdXNoKDEpIDogdC5wdXNoKC0xKSkgOiAiPSIgPT09IGVbMF0gPyByID0gZS5zdWJzdHIoMSkgOiAifiIgPT09IGVbMF0gJiYgKG4gPSAhMCwgciA9IGUuc3Vic3RyKDEpKSwgdC5pbmRleE9mKG8uZGVmYXVsdC5jb21wYXJlVmVyc2lvbnMoaSwgciwgbikpID4gLTENCiAgICAgICAgICAgICAgICAgICAgfSwgdC5pc09TID0gZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9TTmFtZSghMCkgPT09IFN0cmluZyhlKS50b0xvd2VyQ2FzZSgpDQogICAgICAgICAgICAgICAgICAgIH0sIHQuaXNQbGF0Zm9ybSA9IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQbGF0Zm9ybVR5cGUoITApID09PSBTdHJpbmcoZSkudG9Mb3dlckNhc2UoKQ0KICAgICAgICAgICAgICAgICAgICB9LCB0LmlzRW5naW5lID0gZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEVuZ2luZU5hbWUoITApID09PSBTdHJpbmcoZSkudG9Mb3dlckNhc2UoKQ0KICAgICAgICAgICAgICAgICAgICB9LCB0LmlzID0gZnVuY3Rpb24gKGUsIHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IHQgJiYgKHQgPSAhMSksIHRoaXMuaXNCcm93c2VyKGUsIHQpIHx8IHRoaXMuaXNPUyhlKSB8fCB0aGlzLmlzUGxhdGZvcm0oZSkNCiAgICAgICAgICAgICAgICAgICAgfSwgdC5zb21lID0gZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IGUgJiYgKGUgPSBbXSksIGUuc29tZSgoZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5pcyhlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSkpDQogICAgICAgICAgICAgICAgICAgIH0sIGUNCiAgICAgICAgICAgICAgICB9KCk7DQogICAgICAgICAgICAgICAgdC5kZWZhdWx0ID0gZCwgZS5leHBvcnRzID0gdC5kZWZhdWx0DQogICAgICAgICAgICB9LCA5MjogZnVuY3Rpb24gKGUsIHQsIHIpIHsNCiAgICAgICAgICAgICAgICAidXNlIHN0cmljdCI7DQogICAgICAgICAgICAgICAgdC5fX2VzTW9kdWxlID0gITAsIHQuZGVmYXVsdCA9IHZvaWQgMDsNCiAgICAgICAgICAgICAgICB2YXIgbiwgaSA9IChuID0gcigxNykpICYmIG4uX19lc01vZHVsZSA/IG4gOiB7ZGVmYXVsdDogbn07DQogICAgICAgICAgICAgICAgdmFyIHMgPSAvdmVyc2lvblwvKFxkKyhcLj9fP1xkKykrKS9pLCBhID0gW3sNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9nb29nbGVib3QvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIkdvb2dsZWJvdCJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvZ29vZ2xlYm90XC8oXGQrKFwuXGQrKSkvaSwgZSkgfHwgaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocywgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9vcGVyYS9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiT3BlcmEifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocywgZSkgfHwgaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/Om9wZXJhKVtccy9dKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL29wclwvfG9waW9zL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJPcGVyYSJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86b3ByfG9waW9zKVtccy9dKFxTKykvaSwgZSkgfHwgaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocywgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9TYW1zdW5nQnJvd3Nlci9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiU2Ftc3VuZyBJbnRlcm5ldCBmb3IgQW5kcm9pZCJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKSB8fCBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86U2Ftc3VuZ0Jyb3dzZXIpW1xzL10oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvV2hhbGUvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIk5BVkVSIFdoYWxlIEJyb3dzZXIifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocywgZSkgfHwgaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OndoYWxlKVtccy9dKFxkKyg/OlwuXGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvTVpCcm93c2VyL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJNWiBCcm93c2VyIn0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzpNWkJyb3dzZXIpW1xzL10oXGQrKD86XC5cZCspKykvaSwgZSkgfHwgaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocywgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9mb2N1cy9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiRm9jdXMifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OmZvY3VzKVtccy9dKFxkKyg/OlwuXGQrKSspL2ksIGUpIHx8IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHMsIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvc3dpbmcvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIlN3aW5nIn0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzpzd2luZylbXHMvXShcZCsoPzpcLlxkKykrKS9pLCBlKSB8fCBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL2NvYXN0L2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJPcGVyYSBDb2FzdCJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKSB8fCBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86Y29hc3QpW1xzL10oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvb3B0XC9cZCsoPzouP18/XGQrKSsvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIk9wZXJhIFRvdWNoIn0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzpvcHQpW1xzL10oXGQrKFwuP18/XGQrKSspL2ksIGUpIHx8IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHMsIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsveWFicm93c2VyL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJZYW5kZXggQnJvd3NlciJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86eWFicm93c2VyKVtccy9dKFxkKyhcLj9fP1xkKykrKS9pLCBlKSB8fCBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL3VjYnJvd3Nlci9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiVUMgQnJvd3NlciJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKSB8fCBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86dWNicm93c2VyKVtccy9dKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL01heHRob258bXhpb3MvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIk1heHRob24ifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocywgZSkgfHwgaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/Ok1heHRob258bXhpb3MpW1xzL10oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvZXBpcGhhbnkvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIkVwaXBoYW55In0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHMsIGUpIHx8IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzplcGlwaGFueSlbXHMvXShcZCsoXC4/Xz9cZCspKykvaSwgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9wdWZmaW4vaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIlB1ZmZpbiJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKSB8fCBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86cHVmZmluKVtccy9dKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL3NsZWlwbmlyL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJTbGVpcG5pciJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKSB8fCBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86c2xlaXBuaXIpW1xzL10oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvay1tZWxlb24vaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIkstTWVsZW9uIn0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHMsIGUpIHx8IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzprLW1lbGVvbilbXHMvXShcZCsoXC4/Xz9cZCspKykvaSwgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9taWNyb21lc3Nlbmdlci9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiV2VDaGF0In0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzptaWNyb21lc3NlbmdlcilbXHMvXShcZCsoXC4/Xz9cZCspKykvaSwgZSkgfHwgaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocywgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9xcWJyb3dzZXIvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogL3FxYnJvd3NlcmxpdGUvaS50ZXN0KGUpID8gIlFRIEJyb3dzZXIgTGl0ZSIgOiAiUVEgQnJvd3NlciJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86cXFicm93c2VybGl0ZXxxcWJyb3dzZXIpWy9dKFxkKyhcLj9fP1xkKykrKS9pLCBlKSB8fCBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL21zaWV8dHJpZGVudC9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiSW50ZXJuZXQgRXhwbG9yZXIifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/Om1zaWUgfHJ2OikoXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvXHNlZGdcLy9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiTWljcm9zb2Z0IEVkZ2UifSwgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9cc2VkZ1wvKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL2VkZyhbZWFdfGlvcykvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIk1pY3Jvc29mdCBFZGdlIn0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRTZWNvbmRNYXRjaCgvZWRnKFtlYV18aW9zKVwvKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL3ZpdmFsZGkvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIlZpdmFsZGkifSwgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC92aXZhbGRpXC8oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvc2VhbW9ua2V5L2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJTZWFNb25rZXkifSwgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9zZWFtb25rZXlcLyhcZCsoXC4/Xz9cZCspKykvaSwgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9zYWlsZmlzaC9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiU2FpbGZpc2gifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3NhaWxmaXNoXHM/YnJvd3NlclwvKFxkKyhcLlxkKyk/KS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL3NpbGsvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIkFtYXpvbiBTaWxrIn0sIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvc2lsa1wvKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL3BoYW50b20vaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIlBoYW50b21KUyJ9LCByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3BoYW50b21qc1wvKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL3NsaW1lcmpzL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJTbGltZXJKUyJ9LCByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3NsaW1lcmpzXC8oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvYmxhY2tiZXJyeXxcYmJiXGQrL2ksIC9yaW1cc3RhYmxldC9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiQmxhY2tCZXJyeSJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKSB8fCBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvYmxhY2tiZXJyeVtcZF0rXC8oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvKHdlYnxocHcpW28wXXMvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIldlYk9TIEJyb3dzZXIifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocywgZSkgfHwgaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3coPzplYik/W28wXXNicm93c2VyXC8oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvYmFkYS9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiQmFkYSJ9LCByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL2RvbGZpblwvKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL3RpemVuL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJUaXplbiJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86dGl6ZW5ccz8pP2Jyb3dzZXJcLyhcZCsoXC4/Xz9cZCspKykvaSwgZSkgfHwgaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocywgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9xdXB6aWxsYS9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiUXVwWmlsbGEifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OnF1cHppbGxhKVtccy9dKFxkKyhcLj9fP1xkKykrKS9pLCBlKSB8fCBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL2ZpcmVmb3h8aWNld2Vhc2VsfGZ4aW9zL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJGaXJlZm94In0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzpmaXJlZm94fGljZXdlYXNlbHxmeGlvcylbXHMvXShcZCsoXC4/Xz9cZCspKykvaSwgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9lbGVjdHJvbi9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiRWxlY3Ryb24ifSwgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzplbGVjdHJvbilcLyhcZCsoXC4/Xz9cZCspKykvaSwgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9NaXVpQnJvd3Nlci9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiTWl1aSJ9LCByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/Ok1pdWlCcm93c2VyKVtccy9dKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL2Nocm9taXVtL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJDaHJvbWl1bSJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86Y2hyb21pdW0pW1xzL10oXGQrKFwuP18/XGQrKSspL2ksIGUpIHx8IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHMsIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvY2hyb21lfGNyaW9zfGNybW8vaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIkNocm9tZSJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86Y2hyb21lfGNyaW9zfGNybW8pXC8oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvR1NBL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJHb29nbGUgU2VhcmNoIn0sIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86R1NBKVwvKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSAhZS50ZXN0KC9saWtlIGFuZHJvaWQvaSksIHIgPSBlLnRlc3QoL2FuZHJvaWQvaSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCAmJiByDQogICAgICAgICAgICAgICAgICAgIH0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7bmFtZTogIkFuZHJvaWQgQnJvd3NlciJ9LCByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocywgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAodC52ZXJzaW9uID0gciksIHQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9wbGF5c3RhdGlvbiA0L2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6ICJQbGF5U3RhdGlvbiA0In0sIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL3NhZmFyaXxhcHBsZXdlYmtpdC9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiAiU2FmYXJpIn0sIHIgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbLy4qL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gLTEgIT09IGUuc2VhcmNoKCJcXCgiKSA/IC9eKC4qKVwvKC4qKVsgXHRdXCgoLiopLyA6IC9eKC4qKVwvKC4qKSAvOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtuYW1lOiBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCh0LCBlKSwgdmVyc2lvbjogaS5kZWZhdWx0LmdldFNlY29uZE1hdGNoKHQsIGUpfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfV07DQogICAgICAgICAgICAgICAgdC5kZWZhdWx0ID0gYSwgZS5leHBvcnRzID0gdC5kZWZhdWx0DQogICAgICAgICAgICB9LCA5MzogZnVuY3Rpb24gKGUsIHQsIHIpIHsNCiAgICAgICAgICAgICAgICAidXNlIHN0cmljdCI7DQogICAgICAgICAgICAgICAgdC5fX2VzTW9kdWxlID0gITAsIHQuZGVmYXVsdCA9IHZvaWQgMDsNCiAgICAgICAgICAgICAgICB2YXIgbiwgaSA9IChuID0gcigxNykpICYmIG4uX19lc01vZHVsZSA/IG4gOiB7ZGVmYXVsdDogbn0sIHMgPSByKDE4KTsNCiAgICAgICAgICAgICAgICB2YXIgYSA9IFt7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvUm9rdVwvRFZQL10sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvUm9rdVwvRFZQLShcZCtcLlxkKykvaSwgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge25hbWU6IHMuT1NfTUFQLlJva3UsIHZlcnNpb246IHR9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvd2luZG93cyBwaG9uZS9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC93aW5kb3dzIHBob25lICg/Om9zKT9ccz8oXGQrKFwuXGQrKSopL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtuYW1lOiBzLk9TX01BUC5XaW5kb3dzUGhvbmUsIHZlcnNpb246IHR9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvd2luZG93cyAvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvV2luZG93cyAoKE5UfFhQKSggXGRcZD8uXGQpPykvaSwgZSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRXaW5kb3dzVmVyc2lvbk5hbWUodCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge25hbWU6IHMuT1NfTUFQLldpbmRvd3MsIHZlcnNpb246IHQsIHZlcnNpb25OYW1lOiByfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL01hY2ludG9zaCguKj8pIEZ4aU9TKC4qPylcLy9dLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge25hbWU6IHMuT1NfTUFQLmlPU30sIHIgPSBpLmRlZmF1bHQuZ2V0U2Vjb25kTWF0Y2goLyhWZXJzaW9uXC8pKFxkW1xkLl0rKS8sIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvbWFjaW50b3NoL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL21hYyBvcyB4IChcZCsoXC4/Xz9cZCspKykvaSwgZSkucmVwbGFjZSgvW19cc10vZywgIi4iKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldE1hY09TVmVyc2lvbk5hbWUodCksIG4gPSB7bmFtZTogcy5PU19NQVAuTWFjT1MsIHZlcnNpb246IHR9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKG4udmVyc2lvbk5hbWUgPSByKSwgbg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbLyhpcG9kfGlwaG9uZXxpcGFkKS9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9vcyAoXGQrKFtfXHNdXGQrKSopIGxpa2UgbWFjIG9zIHgvaSwgZSkucmVwbGFjZSgvW19cc10vZywgIi4iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7bmFtZTogcy5PU19NQVAuaU9TLCB2ZXJzaW9uOiB0fQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSAhZS50ZXN0KC9saWtlIGFuZHJvaWQvaSksIHIgPSBlLnRlc3QoL2FuZHJvaWQvaSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCAmJiByDQogICAgICAgICAgICAgICAgICAgIH0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvYW5kcm9pZFtccy8tXShcZCsoXC5cZCspKikvaSwgZSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRBbmRyb2lkVmVyc2lvbk5hbWUodCksIG4gPSB7bmFtZTogcy5PU19NQVAuQW5kcm9pZCwgdmVyc2lvbjogdH07DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiAobi52ZXJzaW9uTmFtZSA9IHIpLCBuDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvKHdlYnxocHcpW28wXXMvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86d2VifGhwdylbbzBdc1wvKFxkKyhcLlxkKykqKS9pLCBlKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0ge25hbWU6IHMuT1NfTUFQLldlYk9TfTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIHQubGVuZ3RoICYmIChyLnZlcnNpb24gPSB0KSwgcg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL2JsYWNrYmVycnl8XGJiYlxkKy9pLCAvcmltXHN0YWJsZXQvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvcmltXHN0YWJsZXRcc29zXHMoXGQrKFwuXGQrKSopL2ksIGUpIHx8IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9ibGFja2JlcnJ5XGQrXC8oXGQrKFtfXHNdXGQrKSopL2ksIGUpIHx8IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9cYmJiKFxkKykvaSwgZSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge25hbWU6IHMuT1NfTUFQLkJsYWNrQmVycnksIHZlcnNpb246IHR9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvYmFkYS9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9iYWRhXC8oXGQrKFwuXGQrKSopL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtuYW1lOiBzLk9TX01BUC5CYWRhLCB2ZXJzaW9uOiB0fQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL3RpemVuL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3RpemVuWy9cc10oXGQrKFwuXGQrKSopL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtuYW1lOiBzLk9TX01BUC5UaXplbiwgdmVyc2lvbjogdH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9saW51eC9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7bmFtZTogcy5PU19NQVAuTGludXh9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvQ3JPUy9dLCBkZXNjcmliZTogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtuYW1lOiBzLk9TX01BUC5DaHJvbWVPU30NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9QbGF5U3RhdGlvbiA0L10sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvUGxheVN0YXRpb24gNFsvXHNdKFxkKyhcLlxkKykqKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7bmFtZTogcy5PU19NQVAuUGxheVN0YXRpb240LCB2ZXJzaW9uOiB0fQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfV07DQogICAgICAgICAgICAgICAgdC5kZWZhdWx0ID0gYSwgZS5leHBvcnRzID0gdC5kZWZhdWx0DQogICAgICAgICAgICB9LCA5NDogZnVuY3Rpb24gKGUsIHQsIHIpIHsNCiAgICAgICAgICAgICAgICAidXNlIHN0cmljdCI7DQogICAgICAgICAgICAgICAgdC5fX2VzTW9kdWxlID0gITAsIHQuZGVmYXVsdCA9IHZvaWQgMDsNCiAgICAgICAgICAgICAgICB2YXIgbiwgaSA9IChuID0gcigxNykpICYmIG4uX19lc01vZHVsZSA/IG4gOiB7ZGVmYXVsdDogbn0sIHMgPSByKDE4KTsNCiAgICAgICAgICAgICAgICB2YXIgYSA9IFt7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvZ29vZ2xlYm90L2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAiYm90IiwgdmVuZG9yOiAiR29vZ2xlIn0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9odWF3ZWkvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKGNhbi1sMDEpL2ksIGUpICYmICJOb3ZhIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0ge3R5cGU6IHMuUExBVEZPUk1TX01BUC5tb2JpbGUsIHZlbmRvcjogIkh1YXdlaSJ9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgJiYgKHIubW9kZWwgPSB0KSwgcg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL25leHVzXHMqKD86N3w4fDl8MTApLiovaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IHMuUExBVEZPUk1TX01BUC50YWJsZXQsIHZlbmRvcjogIk5leHVzIn0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9pcGFkL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBzLlBMQVRGT1JNU19NQVAudGFibGV0LCB2ZW5kb3I6ICJBcHBsZSIsIG1vZGVsOiAiaVBhZCJ9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvTWFjaW50b3NoKC4qPykgRnhpT1MoLio/KVwvL10sIGRlc2NyaWJlOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IHMuUExBVEZPUk1TX01BUC50YWJsZXQsIHZlbmRvcjogIkFwcGxlIiwgbW9kZWw6ICJpUGFkIn0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy9rZnR0IGJ1aWxkL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBzLlBMQVRGT1JNU19NQVAudGFibGV0LCB2ZW5kb3I6ICJBbWF6b24iLCBtb2RlbDogIktpbmRsZSBGaXJlIEhEIDcifQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL3NpbGsvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IHMuUExBVEZPUk1TX01BUC50YWJsZXQsIHZlbmRvcjogIkFtYXpvbiJ9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvdGFibGV0KD8hIHBjKS9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogcy5QTEFURk9STVNfTUFQLnRhYmxldH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZS50ZXN0KC9pcG9kfGlwaG9uZS9pKSwgciA9IGUudGVzdCgvbGlrZSAoaXBvZHxpcGhvbmUpL2kpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgJiYgIXINCiAgICAgICAgICAgICAgICAgICAgfSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oaXBvZHxpcGhvbmUpL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBzLlBMQVRGT1JNU19NQVAubW9iaWxlLCB2ZW5kb3I6ICJBcHBsZSIsIG1vZGVsOiB0fQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBbL25leHVzXHMqWzAtNl0uKi9pLCAvZ2FsYXh5IG5leHVzL2ldLCBkZXNjcmliZTogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBzLlBMQVRGT1JNU19NQVAubW9iaWxlLCB2ZW5kb3I6ICJOZXh1cyJ9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvW14tXW1vYmkvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IHMuUExBVEZPUk1TX01BUC5tb2JpbGV9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gImJsYWNrYmVycnkiID09PSBlLmdldEJyb3dzZXJOYW1lKCEwKQ0KICAgICAgICAgICAgICAgICAgICB9LCBkZXNjcmliZTogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBzLlBMQVRGT1JNU19NQVAubW9iaWxlLCB2ZW5kb3I6ICJCbGFja0JlcnJ5In0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiYmFkYSIgPT09IGUuZ2V0QnJvd3Nlck5hbWUoITApDQogICAgICAgICAgICAgICAgICAgIH0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IHMuUExBVEZPUk1TX01BUC5tb2JpbGV9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIndpbmRvd3MgcGhvbmUiID09PSBlLmdldEJyb3dzZXJOYW1lKCkNCiAgICAgICAgICAgICAgICAgICAgfSwgZGVzY3JpYmU6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogcy5QTEFURk9STVNfTUFQLm1vYmlsZSwgdmVuZG9yOiAiTWljcm9zb2Z0In0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gTnVtYmVyKFN0cmluZyhlLmdldE9TVmVyc2lvbigpKS5zcGxpdCgiLiIpWzBdKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiYW5kcm9pZCIgPT09IGUuZ2V0T1NOYW1lKCEwKSAmJiB0ID49IDMNCiAgICAgICAgICAgICAgICAgICAgfSwgZGVzY3JpYmU6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogcy5QTEFURk9STVNfTUFQLnRhYmxldH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiYW5kcm9pZCIgPT09IGUuZ2V0T1NOYW1lKCEwKQ0KICAgICAgICAgICAgICAgICAgICB9LCBkZXNjcmliZTogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBzLlBMQVRGT1JNU19NQVAubW9iaWxlfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJtYWNvcyIgPT09IGUuZ2V0T1NOYW1lKCEwKQ0KICAgICAgICAgICAgICAgICAgICB9LCBkZXNjcmliZTogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBzLlBMQVRGT1JNU19NQVAuZGVza3RvcCwgdmVuZG9yOiAiQXBwbGUifQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJ3aW5kb3dzIiA9PT0gZS5nZXRPU05hbWUoITApDQogICAgICAgICAgICAgICAgICAgIH0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IHMuUExBVEZPUk1TX01BUC5kZXNrdG9wfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJsaW51eCIgPT09IGUuZ2V0T1NOYW1lKCEwKQ0KICAgICAgICAgICAgICAgICAgICB9LCBkZXNjcmliZTogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBzLlBMQVRGT1JNU19NQVAuZGVza3RvcH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAicGxheXN0YXRpb24gNCIgPT09IGUuZ2V0T1NOYW1lKCEwKQ0KICAgICAgICAgICAgICAgICAgICB9LCBkZXNjcmliZTogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBzLlBMQVRGT1JNU19NQVAudHZ9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gInJva3UiID09PSBlLmdldE9TTmFtZSghMCkNCiAgICAgICAgICAgICAgICAgICAgfSwgZGVzY3JpYmU6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogcy5QTEFURk9STVNfTUFQLnR2fQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfV07DQogICAgICAgICAgICAgICAgdC5kZWZhdWx0ID0gYSwgZS5leHBvcnRzID0gdC5kZWZhdWx0DQogICAgICAgICAgICB9LCA5NTogZnVuY3Rpb24gKGUsIHQsIHIpIHsNCiAgICAgICAgICAgICAgICAidXNlIHN0cmljdCI7DQogICAgICAgICAgICAgICAgdC5fX2VzTW9kdWxlID0gITAsIHQuZGVmYXVsdCA9IHZvaWQgMDsNCiAgICAgICAgICAgICAgICB2YXIgbiwgaSA9IChuID0gcigxNykpICYmIG4uX19lc01vZHVsZSA/IG4gOiB7ZGVmYXVsdDogbn0sIHMgPSByKDE4KTsNCiAgICAgICAgICAgICAgICB2YXIgYSA9IFt7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIm1pY3Jvc29mdCBlZGdlIiA9PT0gZS5nZXRCcm93c2VyTmFtZSghMCkNCiAgICAgICAgICAgICAgICAgICAgfSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoL1xzZWRnXC8vaS50ZXN0KGUpKSByZXR1cm4ge25hbWU6IHMuRU5HSU5FX01BUC5CbGlua307DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9lZGdlXC8oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtuYW1lOiBzLkVOR0lORV9NQVAuRWRnZUhUTUwsIHZlcnNpb246IHR9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvdHJpZGVudC9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiBzLkVOR0lORV9NQVAuVHJpZGVudH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC90cmlkZW50XC8oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50ZXN0KC9wcmVzdG8vaSkNCiAgICAgICAgICAgICAgICAgICAgfSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiBzLkVOR0lORV9NQVAuUHJlc3RvfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3ByZXN0b1wvKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBlLnRlc3QoL2dlY2tvL2kpLCByID0gZS50ZXN0KC9saWtlIGdlY2tvL2kpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgJiYgIXINCiAgICAgICAgICAgICAgICAgICAgfSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiBzLkVOR0lORV9NQVAuR2Vja299LCByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL2dlY2tvXC8oXGQrKFwuP18/XGQrKSspL2ksIGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgKHQudmVyc2lvbiA9IHIpLCB0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgICAgIHRlc3Q6IFsvKGFwcGxlKT93ZWJraXRcLzUzN1wuMzYvaV0sIGRlc2NyaWJlOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge25hbWU6IHMuRU5HSU5FX01BUC5CbGlua30NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgdGVzdDogWy8oYXBwbGUpP3dlYmtpdC9pXSwgZGVzY3JpYmU6IGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHtuYW1lOiBzLkVOR0lORV9NQVAuV2ViS2l0fSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gaS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3dlYmtpdFwvKFxkKyhcLj9fP1xkKykrKS9pLCBlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByICYmICh0LnZlcnNpb24gPSByKSwgdA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfV07DQogICAgICAgICAgICAgICAgdC5kZWZhdWx0ID0gYSwgZS5leHBvcnRzID0gdC5kZWZhdWx0DQogICAgICAgICAgICB9DQogICAgICAgIH0pDQogICAgfSkpOw0KfQ0KDQpmdW5jdGlvbiBpbmNsdWRlc05hdW1lblV1aWQoY29udGFpbmVyLCB2YWx1ZSkgew0KICAgIHZhciByZXN1bHQgPSBmYWxzZTsNCiAgICB2YXIgcG9zaXRpb24gPSBjb250YWluZXIuaW5kZXhPZih2YWx1ZSk7DQoNCiAgICBpZiAocG9zaXRpb24gPj0gMCkge3Jlc3VsdCA9IHRydWU7fQ0KDQogICAgcmV0dXJuIHJlc3VsdDsNCn0NCg0KaWYgKCFpbmNsdWRlc05hdW1lblV1aWQoY3VycmVudFVzZXIudXVpZCwgJ3N1cGVyVXNlciRuYXVtZW4nKSAmJiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdicm93c2VyLXZlcnNpb24taW5mbycpICE9ICdjaGVjaycpIHsNCiAgICB2YXIgc2VuZEJyb3dzZXJJbmZvID0gZnVuY3Rpb24gKCkgew0KICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdicm93c2VyLXZlcnNpb24taW5mbycsICdjaGVjaycpDQoNCiAgICAgICAgdmFyIGJyb3dzZXJWZXJzaW9uSW5mb19pdHNtMzY1ID0gYm93c2VyLmdldFBhcnNlcih3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkucGFyc2VkUmVzdWx0Ow0KICAgICAgICB2YXIgYnJvd3NlclZlcnNpb25JbmZvX3hociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOw0KDQogICAgICAgIGJyb3dzZXJWZXJzaW9uSW5mb194aHIub3BlbignUE9TVCcsICIvc2Qvc2VydmljZXMvcmVzdC9leGVjLXBvc3Q/ZnVuYz1tb2R1bGVzLmVsa01vZHVsZS5jcmVhdGVEb2N1bWVudCZwYXJhbXM9cmVxdWVzdCZyYXc9dHJ1ZSIsIHRydWUpOw0KICAgICAgICBicm93c2VyVmVyc2lvbkluZm9feGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7DQogICAgICAgIGJyb3dzZXJWZXJzaW9uSW5mb194aHIuc2VuZChKU09OLnN0cmluZ2lmeSh7DQogICAgICAgICAgICBwYXRoOiAnL2Jyb3dzZXJfYW5hbHl0aWNzL19kb2MnLA0KICAgICAgICAgICAgZGF0YTogew0KICAgICAgICAgICAgICAgIGJyb3dzZXI6IHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogYnJvd3NlclZlcnNpb25JbmZvX2l0c20zNjUuYnJvd3Nlci5uYW1lLA0KICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBicm93c2VyVmVyc2lvbkluZm9faXRzbTM2NS5icm93c2VyLnZlcnNpb24NCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIG9zOiB7DQogICAgICAgICAgICAgICAgICAgIG5hbWU6IGJyb3dzZXJWZXJzaW9uSW5mb19pdHNtMzY1Lm9zLm5hbWUsDQogICAgICAgICAgICAgICAgICAgIHZlcnNpb246IGJyb3dzZXJWZXJzaW9uSW5mb19pdHNtMzY1Lm9zLnZlcnNpb24sDQogICAgICAgICAgICAgICAgICAgIHZlcnNpb25OYW1lOiBicm93c2VyVmVyc2lvbkluZm9faXRzbTM2NS5vcy52ZXJzaW9uTmFtZQ0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgcGxhdGZvcm06IHsNCiAgICAgICAgICAgICAgICAgICAgdHlwZTogYnJvd3NlclZlcnNpb25JbmZvX2l0c20zNjUucGxhdGZvcm0udHlwZQ0KICAgICAgICAgICAgICAgIH0sDQoNCiAgICAgICAgICAgICAgICBob3N0OiB3aW5kb3cubG9jYXRpb24uaG9zdCwNCiAgICAgICAgICAgICAgICB1c2VyOiBjdXJyZW50VXNlci51dWlkLA0KDQogICAgICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoKQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9KSk7DQogICAgfQ0KDQogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIHNlbmRCcm93c2VySW5mbyk7DQp9</file>
    <targetPlace>global</targetPlace>
    <title lang="ru">Статистика по браузерам</title>
</customJSElement>
